<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

using System;
using System.Linq;
using System.IO;
using NBitcoin.DataEncoders;
using NBitcoin.Protocol;

namespace NBitcoin
{
<# foreach (string t in new []{ "256","160" }) { #>
	public class uint<#= t #> :  IBitcoinSerializable
	{
		public static uint<#= t #> Zero
		{
			get { return new uint<#= t #>(0); }
		}

		public static uint<#= t #> One 
		{
			get { return new uint<#= t #>(1); }
		}

		public uint<#= t #>()
		{
			for(int i = 0 ; i < WIDTH ; i++)
				pn[i] = 0;
		}

		public uint<#= t #>(uint<#= t #> b)
		{
			for(int i = 0 ; i < WIDTH ; i++)
				pn[i] = b.pn[i];
		}

		public static uint<#= t #> Parse(string hex)
		{
			var ret = new uint<#= t #>();
			ret.SetHex(hex);
			return ret;
		}
		public static bool TryParse(string hex, out uint<#= t #> result)
		{
			if(hex == null)
				throw new ArgumentNullException("hex");
			result = null;
			if(hex.Length != WIDTH_BYTE * 2)
				return false;
			if(!((HexEncoder)Encoders.Hex).IsValid(hex))
				return false;
			var ret = new uint<#= t #>();
			ret.SetHex(hex);
			result = ret;
			return true;
		}

		private static readonly HexEncoder Encoder = new HexEncoder();
		private const int WIDTH = <#= t #> / 32;
		private const int WIDTH_BYTE = <#= t #> / 8;
		private UInt32[] pn = new UInt32[WIDTH];

		internal void SetHex(string str)
		{
			Array.Clear(pn, 0, pn.Length);
			str = str.Trim();

			if (str.StartsWith("0x", StringComparison.OrdinalIgnoreCase))
				str = str.Substring(2);

			var bytes = Encoder.DecodeData(str).Reverse().ToArray();
			SetBytes(bytes);
		}

		public byte GetByte(int index)
		{
			var uintIndex = index / sizeof(uint);
			var byteIndex = index % sizeof(uint);
			var value = pn[uintIndex];
			return (byte)(value >> (byteIndex * 8));
		}

		private void SetBytes(byte[] arr)
		{
			for (var i = 0; i < WIDTH && i < arr.Length / 4; i++)
			{
				pn[i] = Utils.ToUInt32(arr, 4 * i, true);
			}
		}

		public override string ToString()
		{ 
			return Encoder.EncodeData(ToBytes().Reverse().ToArray());
		}

		public uint<#= t #>(ulong b)
		{
			pn[0] = (uint)b;
			pn[1] = (uint)(b >> 32);
			for (int i = 2; i < WIDTH; i++)
				pn[i] = 0;
		}

		public uint<#= t #>(byte[] vch, bool lendian = true)
		{
			if (vch.Length != WIDTH_BYTE)
			{
				throw new FormatException("the byte array should be <#= t #> byte long");
			}

			if(!lendian)
				vch = vch.Reverse().ToArray();

			SetBytes(vch);
		}

		public uint<#= t #>(string str)
		{
			SetHex(str);
		}

		public uint<#= t #>(byte[] vch)
			:this(vch, true)
		{
		}

		public override bool Equals(object obj)
		{
			var item = obj as uint<#= t #>;
			if(item == null)
				return false;
			return AreEquals(pn, item.pn);
		}

		public static bool operator ==(uint<#= t #> a, uint<#= t #> b)
		{
			if(System.Object.ReferenceEquals(a, b))
				return true;
			if(((object)a == null) || ((object)b == null))
				return false;
			return AreEquals(a.pn, b.pn);
		}

		private static bool AreEquals(uint[] ar1, uint[] ar2)
		{
			if(ar1.Length != ar2.Length)
				return false;
			for(int i = 0 ; i < ar1.Length ; i++)
			{
				if(ar1[i] != ar2[i])
					return false;
			}
			return true;
		}

		public static bool operator <(uint<#= t #> a, uint<#= t #> b)
		{
			return Comparison(a, b) < 0;
		}

		public static bool operator >(uint<#= t #> a, uint<#= t #> b)
		{
			return Comparison(a, b) > 0;
		}

		public static bool operator <=(uint<#= t #> a, uint<#= t #> b)
		{
			return Comparison(a, b) <= 0;
		}

		public static bool operator >=(uint<#= t #> a, uint<#= t #> b)
		{
			return Comparison(a, b) >= 0;
		}

		private static int Comparison(uint<#= t #> a, uint<#= t #> b)
		{
			 for (int i = WIDTH-1; i >= 0; i--)
			{
				if (a.pn[i] < b.pn[i])
					return -1;
				if (a.pn[i] > b.pn[i])
					return 1;
			}
			return 0;
		}

		public static bool operator !=(uint<#= t #> a, uint<#= t #> b)
		{
			return !(a == b);
		}

		public static bool operator ==(uint<#= t #> a, ulong b)
		{
			return (a == new uint<#= t #>(b));
		}

		public static bool operator !=(uint<#= t #> a, ulong b)
		{
			return !(a == new uint<#= t #>(b));
		}

		public static uint<#= t #> operator ^(uint<#= t #> a, uint<#= t #> b)
		{
			var c = new uint<#= t #>();
			c.pn = new uint[a.pn.Length];
			for(int i = 0 ; i < c.pn.Length ; i++)
			{
				c.pn[i] = a.pn[i] ^ b.pn[i];
			}
			return c;
		}

		public static bool operator!(uint<#= t #> a)
		{
			for (int i = 0; i < WIDTH; i++)
				if (a.pn[i] != 0)
					return false;
			return true;
		}

		public static uint<#= t #> operator-(uint<#= t #> a, uint<#= t #> b)
		{
			return a + (-b);
		}

		public static uint<#= t #> operator+(uint<#= t #> a, uint<#= t #> b)
		{
			var result = new uint<#= t #>();
			ulong carry = 0;
			for (int i = 0; i < WIDTH; i++)
			{
				ulong n = carry + a.pn[i] + b.pn[i];
				result.pn[i] = (uint)(n & 0xffffffff);
				carry = n >> 32;
			}
			return result;
		}

		public static uint<#= t #> operator+(uint<#= t #> a, ulong b)
		{
			return a + new uint<#= t #>(b);
		}

		public static implicit operator uint<#= t #>(ulong value)
		{
			return new uint<#= t #>(value);
		}

		public static uint<#= t #> operator &(uint<#= t #> a, uint<#= t #> b)
		{
			var n = new uint<#= t #>(a);
			for(int i = 0 ; i < WIDTH ; i++)
				n.pn[i] &= b.pn[i];
			return n;
		}

		public static uint<#= t #> operator |(uint<#= t #> a, uint<#= t #> b)
		{
			var n = new uint<#= t #>(a);
			for(int i = 0 ; i < WIDTH ; i++)
				n.pn[i] |= b.pn[i];
			return n;
		}

		public static uint<#= t #> operator <<(uint<#= t #> a, int shift)
		{
			var result = new uint<#= t #>();
			int k = shift / 32;
			shift = shift % 32;
			for(int i = 0 ; i < WIDTH ; i++)
			{
				if(i + k + 1 < WIDTH && shift != 0)
					result.pn[i + k + 1] |= (a.pn[i] >> (32 - shift));
				if(i + k < WIDTH)
					result.pn[i + k] |= (a.pn[i] << shift);
			}
			return result;
		}

		public static uint<#= t #> operator >>(uint<#= t #> a, int shift)
		{
			var result = new uint<#= t #>();
			int k = shift / 32;
			shift = shift % 32;
			for(int i = 0 ; i < WIDTH ; i++)
			{
				if(i - k - 1 >= 0 && shift != 0)
					result.pn[i - k - 1] |= (a.pn[i] << (32 - shift));
				if(i - k >= 0)
					result.pn[i - k] |= (a.pn[i] >> shift);
			}
			return result;
		}

		
		public static uint<#= t #> operator ~(uint<#= t #> a)
		{
			var b = new uint<#= t #>();
			for(int i = 0 ; i < b.pn.Length ; i++)
			{
				b.pn[i] = ~a.pn[i];
			}
			return b;
		}

		public static uint<#= t #> operator -(uint<#= t #> a)
		{
			var b = new uint<#= t #>();
			for(int i = 0 ; i < b.pn.Length ; i++)
			{
				b.pn[i] = ~a.pn[i];
			}
			b++;
			return b;
		}

		public static uint<#= t #> operator ++(uint<#= t #> a)
		{
			return a + 1;
		}

		public static uint<#= t #> operator --(uint<#= t #> a)
		{
			return a - 1;
		}
		
		public byte[] ToBytes(bool lendian = true)
		{
			var arr = new byte[WIDTH_BYTE];
			for (int i = 0; i < WIDTH; i++)
			{
				Buffer.BlockCopy(Utils.ToBytes(pn[i], true), 0, arr, 4 * i, 4);
			}
			if (!lendian)
				Array.Reverse(arr);
			return arr;
		}

		public void ReadWrite(BitcoinStream stream)
		{
			if(stream.Serializing)
			{
				var b = ToBytes();
				stream.ReadWrite(ref b);
			}
			else
			{
				byte[] b = new byte[WIDTH_BYTE];
				stream.ReadWrite(ref b);
				this.pn = new uint<#= t #>(b).pn;
			}
		}

		public int GetSerializeSize(int nType=0, ProtocolVersion protocolVersion = ProtocolVersion.PROTOCOL_VERSION)
		{
			return WIDTH_BYTE;
		}

		public int Size
		{
			get
			{
				return WIDTH_BYTE;
			}
		}

		public ulong GetLow64()
		{
			return pn[0] | (ulong)pn[1] << 32;
		}

		public uint GetLow32()
		{
			return pn[0];
		}

		public override int GetHashCode()
		{
			int hash = 17;
			unchecked
			{
				foreach(var element in pn)
				{
					hash = hash * 31 + element.GetHashCode();
				}
			}
			return hash;
		}
	}
<# } #>
}